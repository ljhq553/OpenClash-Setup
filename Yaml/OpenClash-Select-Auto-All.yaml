# 机场节点订阅
proxy-providers:
  XXdl-Link:
    url: "机场订阅地址"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    exclude-filter: "关键词1|关键词2|关键词3......"
      additional-prefix: "机场简称-"

# 节点定义
proxies:
  - {name: 直连, type: direct}

# 策略组定义
proxy-groups:
  - {name: ChatGPT, type: select, proxies: [🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: TikTok,  type: select, proxies: [🇸🇬 狮城-自动, 🇹🇼 台湾-自动, 🇺🇸 美国-自动]}
  - {name: Spotify, type: select, proxies: [🇭🇰 香港-自动, 🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: Disney, type: select, proxies: [🇭🇰 香港-自动, 🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: Netflix, type: select, proxies: [🇭🇰 香港-自动, 🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: HBO, type: select, proxies: [🇭🇰 香港-自动, 🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: GitHub, type: select, proxies: [⚙️ 所有-自动, 🇭🇰 香港-自动, 🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: YouTube, type: select, proxies: [🇭🇰 香港-自动, 🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: Google, type: select, proxies: [⚙️ 所有-自动, 🇭🇰 香港-自动, 🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: 🌐 国外, type: select, proxies: [⚙️ 所有-自动, 🇭🇰 香港-自动, 🇹🇼 台湾-自动, 🇸🇬 狮城-自动, 🇺🇸 美国-自动]}
  - {name: 🏠 国内, type: select, proxies: [直连, ⚙️ 所有-自动]}
  - {name: 🐟 其他, type: select, proxies: [🔄 其他-自动, ⚙️ 所有-自动]}

  - {name: ⚙️ 所有-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🇭🇰 香港-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"}
  - {name: 🇹🇼 台湾-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan)).*$"}
  - {name: 🇸🇬 狮城-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"}
  - {name: 🇺🇸 美国-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"}
  - {name: 🇯🇵 日本-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"}
  - {name: 🇰🇷 韩国-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"}
  - {name: 🔄 其他-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^((?!(直连|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).)*$"}


# 规则集
rules:
  - RULE-SET,ChatGPT / Domain,ChatGPT
  - RULE-SET,TikTok / Domain,TikTok
  - RULE-SET,Spotify / Domain,Spotify
  - RULE-SET,Disney / Domain,Disney
  - RULE-SET,Netflix / Domain,Netflix
  - RULE-SET,Netflix / IP,Netflix,no-resolve
  - RULE-SET,HBO / Domain,HBO
  - RULE-SET,GitHub / Domain,GitHub
  - RULE-SET,Youtube / Domain,YouTube
  - RULE-SET,Google / Domain,Google
  - RULE-SET,Proxy / Domain,🌐 国外
  - RULE-SET,Globe / Domain,🌐 国外  
  - RULE-SET,Direct / Domain,🏠 国内
  - RULE-SET,China / Domain,🏠 国内
  - RULE-SET,China / IP,🏠 国内,no-resolve
  - RULE-SET,Private / Domain,🏠 国内
  - MATCH,🐟 其他

# 规则集提供者
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers:
  ChatGPT / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/OpenAI.mrs"}
  TikTok / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/TikTok.mrs"}
  Spotify / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/Spotify.mrs"}
  Disney / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/Disney.mrs"}
  HBO / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/HBO.mrs"}
  GitHub / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/GitHub.mrs"}
  Netflix / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/NetFlix.mrs"}
  Netflix / IP: {<<: *ip, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/NetFlix_IP.mrs"}
  Youtube / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/YouTube.mrs"}
  Google / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/Google.mrs"}
  Google / IP: {<<: *ip, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/Google_IP.mrs"}

  Proxy / Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/Proxy.list"}
  Globe / Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/Global.list"}
  Direct / Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/Direct.list"}
  China / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/China.mrs"}
  China / IP: {<<: *ip, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/China_IP.mrs"}
  Private / Domain: {<<: *domain, url: "https://gh-proxy.com/raw.githubusercontent.com/ljhq553/Rules/refs/heads/main/Private.mrs"}